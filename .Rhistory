mean_index_onset = index_exposed + mean_ip
meansafe_date = mean_index_onset + mean_si
return (meansafe_date)
}
ui <- navbarPage(theme = shinythemes::shinytheme("sandstone"),
#navbarPage(theme = "sandstone.css" -:if deploying
#theme = shinythemes::shinytheme("sandstone") -:if running locally
"COVID-19 Safe Date Calculator",
#multigeom tab
tabPanel("Safe Date",
sidebarLayout(
sidebarPanel(
dateInput(
inputId = "index_exposed",
label = "Index Case Exposed Date:",
value = "2020-05-10"
),
numericInput(
inputId = "max_ip",
label = "Maximum Incubation Period (days):",
value = 14,
step = 1
),
numericInput(
inputId = "max_si",
label = "Maximum Serial Interval (days):",
value = 7,
step  = 1
),
numericInput(
inputId = "mean_ip",
label = "Mean Incubation Period (days):",
value = 6,
step = 1
),
numericInput(
inputId = "mean_si",
label = "Mean Serial Interval (days):",
value = 6,
step  = 1
)
),
mainPanel(
helpText("This calculator assists in estimating the safe date for a person with
a possibility of contact with a COVID-19 positive person.
A safe date is the date after which COVID-19 is extremely unlikely."),
helpText(em("Transmission scenarios: ",
p(h6("Scenario 1: Symptomatic COVID+ with Person A, to estimate the safe date for person A (patient),
take IP = 0, SI = <keep or change values>")),
p(h6("Scenario 2: Asymptomatic COVID+ with Person A, to estimate the safe date for person A (patient),
take IP = <keep or change values>, SI = <keep or change values>")),
p(h6("Scenario 3: Symptomatic Person A who has close contact history with a COVID+ person
(symptom status unknown), with Person B, to estimate the safe date for person B (patient),
take IP = 0, SI = <keep or change values>")),
p(h6("Scenario 4: Asymptomatic Person A who has close contact history with a COVID+ person
(symptom status unknown), with Person B, to estimate the safe date for person B (patient),
take IP = <keep or change values>, SI = <keep or change values>"))
)
),
#headerPanel(""),
helpText("Default values of the model are based on these references:"),
h5(
uiOutput("ref1"),
uiOutput("ref2"),
uiOutput("ref3")
),
#headerPanel(""),
h6(
uiOutput("input")
),
h4(
uiOutput("result")
)
)
)
)
)
server <- function(input, output) {
output$input <- renderText({
paste0("Date index case exposed was ", "<strong>",input$index_exposed,
" with maximum incubation period of ", input$max_ip,
" and maximum serial interval of ", input$max_si,
", or alternatively with mean incubation period of ", input$mean_ip,
" and mean serial interval of ", input$mean_si,
",", "</strong>")
})
output$result <- renderText({
uppersaf = uppersafe(index_exposed = input$index_exposed,
max_ip = input$max_ip,
max_si = input$max_si
)
meansaf = meansafe(index_exposed = input$index_exposed,
mean_ip = input$mean_ip,
mean_si = input$mean_si
)
paste0("Patient's maximum safe date is ",
"<code>", round(uppersaf, 1), "</code>", ", and the mean safe date is ", "<code>", round(meansaf, 1), "</code>")
})
url1 <- a("1. Position Statement Singapore's NCID & Academy of Medicine",
href="https://www.ams.edu.sg/view-pdf.aspx?file=media%5C5556_fi_331.pdf&ofile=
Period+of+Infectivity+Position+Statement+(final)+23-5-20+(logos).pdf")
output$ref1 <- renderUI({
tagList(url1)
})
url2 <- a("2. Incubation Period", href="https://www.acpjournals.org/doi/10.7326/M20-0504")
output$ref2 <- renderUI({
tagList(url2)
})
url3 <- a("3. Serial Interval", href="https://www.nature.com/articles/s41591-020-0869-5")
output$ref3 <- renderUI({
tagList(url3)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(plotly)
library(shiny)
library(googlesheets)
library(gsheet)
url <- 'docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
p <- plot_ly(data, x = ~date, y = ~dailynew, type = 'bar', name = 'New cases confirmed each day',
marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~SMA10, name = '10-day Moving averages', mode = "lines", type = "scatter", marker = list(color = 'rgb(255,125,0)')) %>%
add_trace(y = ~SMA5, name = '5-day Moving averages', mode = "lines", line = list(color = 'rgb(255,223,0)'), type = "scatter", marker = list(color = 'rgb(255,223,0)')) %>%
layout(title = 'New cases confirmed each day',
xaxis = list(
title = "",
tickformat = "%b %d",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Confirmed new cases',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
library(plotly)
library(shiny)
#library(magrittr)
#library(d3heatmap)
#library(dplyr)
#library(readr)
#library(lubridate)
#library(stringr)
library(googlesheets)
library(gsheet)
url <- 'https://docs.google.com/spreadsheets/d/1lUQGdg5NyDIcQIfZ_hsT6VX_L9MPmLMWF4thEQqimcs/edit?usp=sharing'
data <- gsheet2tbl(url)
#load("dailynew.Rdata")
#names(data)
#str(data)
#data$date <- dmy(data$date)
#str(data$date)
#save(data, file="/Users/saifulsafuanmdsani/Documents/COVID/msia_covid/dailynewilisari.Rdata")
p <- plot_ly(data, x = ~date, y = ~new_ilisari, type = 'bar', name = 'New ILI/SARI cases confirmed each day',
marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~SMA10, name = '10-day Moving averages', mode = "lines", type = "scatter", marker = list(color = 'rgb(255,125,0)')) %>%
add_trace(y = ~SMA5, name = '5-day Moving averages', mode = "lines", line = list(color = 'rgb(255,223,0)'), type = "scatter", marker = list(color = 'rgb(255,223,0)')) %>%
layout(title = 'New ILI/SARI cases confirmed each day',
xaxis = list(
title = "",
tickformat = "%b %d",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Confirmed new ILISARI cases',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0, y = 1, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
library(knitr)
library(distill)
library(googlesheets)
library(gsheet)
library(dplyr)
library(incidence)
library(ggplot2)
library(plotly)
library(EpiEstim)
library(earlyR)
library(tidyr)
library(lubridate)
library(ggformula)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:nrow(data))
counts_msia_trunc <- data.frame(data$dailynew[12:15])
colnames(counts_msia_trunc) <- c("local")
counts_msia_trunc <- as.matrix(counts_msia_trunc)
incidmsia <- incidence(data$date[12:15])
incidmsia$counts <- counts_msia_trunc
res <- get_R(incidmsia, si_mean = 3.96, si_sd = 4.75)
R_val <- sample_R(res, 1000)
library(projections)
set.seed(6472)
future_i <- project(incidmsia, R = R_val, n_sim = 1000, si = res$si, n_days = 45)
# serial interval assumptions: [Zhanwei et al (2020)](https://wwwnc.cdc.gov/eid/article/26/6/20-0357_article)
fut <- plot(future_i)
futu <- fut[["layers"]][[2]][["data"]] %>% filter(quantile == "50%") # from 2020-03-18
counts_msia <- data.frame(data$dailynew)
colnames(counts_msia) <- c("local")
counts_msia <- as.matrix(counts_msia)
incidmsia2 <- incidence(data$date)
incidmsia2$counts <- counts_msia
incidmsia2[["counts"]] <- as.matrix(as.integer(incidmsia2[["counts"]]))
library(scales)
dattoproj <- data.frame(incidmsia2$dates, incidmsia2$counts)
dattoproj <- dattoproj[1:83,]
p1 <- ggplot(dattoproj, aes(x=incidmsia2.dates, y=incidmsia2.counts)) +
geom_line(col = "#2C3539", linetype = "dotted") +
geom_spline(col = "steelblue", nknots = 30) +
geom_line(data=futu, aes(x=dates, y = value), col = "tomato") +
scale_y_continuous(trans = "log",labels = scales::number_format(accuracy = 1)) +
labs(y = "Incidence (log scale y-axis)", x = "Date")
ggplotly(p1)
## we choose to draw:
## - the mean of the SI in a Normal(3.96, 1), truncated at 1 and 21
## - the sd of the SI in a Normal(4.75, 0.5), truncated at 0.5 and 7.5
config <- make_config(list(mean_si = 3.96, std_mean_si = 0.5,
min_mean_si = 3.5, max_mean_si = 4.5,
std_si = 4.75, std_std_si = 0.5,
min_std_si = 4.5, max_std_si = 5.1))
# https://drive.google.com/file/d/1HQex9HFdNy883zTiUEywsBiFEb_orr2t/view
res_uncertain_si <- estimate_R(data$dailynew,
method = "uncertain_si",
config = config)
#> Default config will estimate R on weekly sliding windows.
#>     To change this change the t_start and t_end arguments.
dfp55 <- data.frame(res_uncertain_si$R)
dfp55$time <- data$date[8:length(data$date)]
#str(dfp55)
p55 <- ggplot(dfp55, aes(time,Mean.R.))
p55<- p55+ geom_line(col = "steelblue")
p55<- p55+ geom_ribbon(aes(ymin=Quantile.0.025.R.,ymax=Quantile.0.975.R.), alpha=0.3, fill = "steelblue") +
labs(y = "R", x = "Time", title = "Daily Effective Reproduction Number")
ggplotly(p55) %>%
layout(title = list(text = paste0('Daily Effective Reproduction Number',
'<br>',
'<sup>',
'SI adjusted for uncertainty',
'</sup>')))
library(knitr)
library(distill)
library(googlesheets)
library(gsheet)
library(dplyr)
library(incidence)
library(ggplot2)
library(plotly)
library(EpiEstim)
library(earlyR)
library(tidyr)
library(lubridate)
library(ggformula)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:nrow(data))
counts_msia_trunc <- data.frame(data$dailynew[12:15])
colnames(counts_msia_trunc) <- c("local")
counts_msia_trunc <- as.matrix(counts_msia_trunc)
incidmsia <- incidence(data$date[12:15])
incidmsia$counts <- counts_msia_trunc
res <- get_R(incidmsia, si_mean = 3.96, si_sd = 4.75)
R_val <- sample_R(res, 1000)
library(projections)
set.seed(6472)
future_i <- project(incidmsia, R = R_val, n_sim = 1000, si = res$si, n_days = 45)
# serial interval assumptions: [Zhanwei et al (2020)](https://wwwnc.cdc.gov/eid/article/26/6/20-0357_article)
fut <- plot(future_i)
futu <- fut[["layers"]][[2]][["data"]] %>% filter(quantile == "50%") # from 2020-03-18
counts_msia <- data.frame(data$dailynew)
colnames(counts_msia) <- c("local")
counts_msia <- as.matrix(counts_msia)
incidmsia2 <- incidence(data$date)
incidmsia2$counts <- counts_msia
incidmsia2[["counts"]] <- as.matrix(as.integer(incidmsia2[["counts"]]))
library(scales)
dattoproj <- data.frame(incidmsia2$dates, incidmsia2$counts)
dattoproj <- dattoproj[1:83,]
p1 <- ggplot(dattoproj, aes(x=incidmsia2.dates, y=incidmsia2.counts)) +
geom_line(col = "#2C3539", linetype = "dotted") +
geom_spline(col = "steelblue", nknots = 30) +
geom_line(data=futu, aes(x=dates, y = value), col = "tomato") +
scale_y_continuous(trans = "log",labels = scales::number_format(accuracy = 1)) +
labs(y = "Incidence (log scale y-axis)", x = "Date")
ggplotly(p1)
## we choose to draw:
## - the mean of the SI in a Normal(3.96, 1), truncated at 1 and 21
## - the sd of the SI in a Normal(4.75, 0.5), truncated at 0.5 and 7.5
config <- make_config(list(mean_si = 3.96, std_mean_si = 0.5,
min_mean_si = 3.5, max_mean_si = 4.5,
std_si = 4.75, std_std_si = 0.5,
min_std_si = 4.5, max_std_si = 5.1))
# https://drive.google.com/file/d/1HQex9HFdNy883zTiUEywsBiFEb_orr2t/view
res_uncertain_si <- estimate_R(data$dailynew,
method = "uncertain_si",
config = config)
#> Default config will estimate R on weekly sliding windows.
#>     To change this change the t_start and t_end arguments.
dfp55 <- data.frame(res_uncertain_si$R)
dfp55$time <- data$date[8:length(data$date)]
#str(dfp55)
p55 <- ggplot(dfp55, aes(time,Mean.R.))
p55<- p55+ geom_line(col = "steelblue")
p55<- p55+ geom_ribbon(aes(ymin=Quantile.0.025.R.,ymax=Quantile.0.975.R.), alpha=0.3, fill = "steelblue") +
labs(y = "R", x = "Time", title = "Daily Effective Reproduction Number")
ggplotly(p55) %>%
layout(title = list(text = paste0('Daily Effective Reproduction Number',
'<br>',
'<sup>',
'SI adjusted for uncertainty',
'</sup>')))
getwd()
setwd("/Users/saifulsafuanmdsani/Documents/COVID")
getwd()
library(lubridate)
library(dplyr)
library(ggplot2)
library(knitr)
library(googlesheets)
library(gsheet)
# md
## https://www.calvin.edu/~rpruim/courses/s341/S17/from-class/MathinRmd.html
data <- read.csv("/Users/saifulsafuanmdsani/Documents/COVID/total-cases-covid-19b.csv")
str(data)
data$Date <- mdy(data$Date)
str(data)
colnames(data)[4] <- "Totalcases"
str(data)
Td=6
K <- log(2)/6
K
tau_ll=4
R0_ll=exp(K*tau_ll)
R0_ll
tau_ul=7.5
R0_ul=exp(K*tau_ul)
R0_ul
msia2 <- data %>% filter(Entity=="Malaysia" & Date>"2020-04-15")
msia2$Day <- 1:25
str(msia2)
ggplot(msia2, aes(x=Date, y=Totalcases)) + geom_point() + geom_smooth(method = "lm")
model <- lm(Day ~ Totalcases, data = msia2 )
summary(model)
predict(model, newdata = data.frame(Totalcases=10144), interval = "prediction")
Ke <- log(2)/81
Ke
tau_ll=4
Re_ll=exp(Ke*tau_ll)
Re_ll
tau_ul=7.5
Re_ul=exp(Ke*tau_ul)
Re_ul
#Re_ul=exp(0.00001*tau_ul) # if...
#Re_ul
datanew <- data <- read.csv("/Users/saifulsafuanmdsani/Documents/COVID/daily-cases-covid-19.csv")
str(datanew)
datanew$Date <- mdy(datanew$Date)
colnames(datanew)[4] <- "Dailynewcases"
str(datanew)
msianew <- datanew %>% filter(Entity=="Malaysia")
ggplot(msianew, aes(x=Date, y=Dailynewcases)) + geom_point() + geom_smooth(method = "auto")
msianew_early <- msianew %>% filter(Date>"2020-03-11" & Date<"2020-03-19")
ggplot(msianew_early, aes(x=Date, y=Dailynewcases)) + geom_point() + geom_smooth(method = "lm")
msianew_early$Day <- 1:7
str(msianew_early)
modelnewearly <- lm(Day ~ Dailynewcases, data = msianew_early )
summary(modelnewearly)
predict(modelnewearly, newdata = data.frame(Dailynewcases=100), interval = "prediction")
predict(modelnewearly, newdata = data.frame(Dailynewcases=200), interval = "prediction")
7.033665-4.552864
Td=2.480801
K=log(2)/Td
K <- log(2)/2.480801
K
tau_ll=4
R0_ll=exp(K*tau_ll)
R0_ll
tau_ul=7.5
R0_ul=exp(K*tau_ul)
R0_ul
msianew_decr <- msianew %>% filter(Date>"2020-04-01" & Date<"2020-05-02")
ggplot(msianew_decr, aes(x=Date, y=Dailynewcases)) + geom_point() + geom_smooth(method = "lm")
msianew_decr$Day <- 1:30
str(msianew_decr)
modelnewdecr <- lm(Day ~ Dailynewcases, data = msianew_decr )
summary(modelnewdecr)
predict(modelnewdecr, newdata = data.frame(Dailynewcases=150), interval = "prediction")
predict(modelnewdecr, newdata = data.frame(Dailynewcases=75), interval = "prediction")
19.90004-9.859377
Ke <- log(0.5)/10.04066
Ke
tau_ll=4
Re_ll=exp(Ke*tau_ll)
Re_ll
tau_ul=7.5
Re_ul=exp(Ke*tau_ul)
Re_ul
msianew_slower <- msianew %>% filter(Date>"2020-05-02" & Date<"2020-05-10")
ggplot(msianew_slower, aes(x=Date, y=Dailynewcases)) + geom_point() + geom_smooth(method = "lm")
msianew_slower$Day <- 1:7
str(msianew_slower)
modelnewslower <- lm(Day ~ Dailynewcases, data = msianew_slower )
summary(modelnewslower)
predict(modelnewslower, newdata = data.frame(Dailynewcases=80), interval = "prediction")
predict(modelnewslower, newdata = data.frame(Dailynewcases=40), interval = "prediction")
5.040921-3.456911
Ke <- log(0.5)/1.58401
Ke
tau_ll=4
Re_ll=exp(Ke*tau_ll)
Re_ll
tau_ul=7.5
Re_ul=exp(Ke*tau_ul)
Re_ul
1+K*5.1
1+(K*5.1)+((K^2)*(5.1/2)*(5.1/2))
Ke <- log(0.5)/10.04066
Ke
1+(Ke*5.1)
1+(Ke*5.1)+((Ke^2)*(5.1/2)*(5.1/2))
Ke <- log(0.5)/1.58401
Ke
1+(Ke*5.1) # Caution: negative $R_e$
1+(Ke*5.1)+((Ke^2)*(5.1/2)*(5.1/2))
Ke <- log(0.5)/1.58401
Ke
1+(Ke*((5.1*0.6)+(5.1*0.4)))+((Ke^2)*(5.1*0.6)*(5.1*0.4)) # Caution: negative $R_e$
1+(Ke*((5.1*0.99999)+(5.1*0.00001)))+((Ke^2)*(5.1*0.99999)*(5.1*0.00001)) # Caution: negative $R_e$
library(R0)
data (Germany.1918)
str(Germany.1918)
#plot epidemic
plot (Germany.1918, xlab = "Time")
plot(x=msianew$Date, y=msianew$Dailynewcases, xlab = "Time")
plot(x=msianew$Date, y=log(msianew$Dailynewcases), xlab = "Time")
msia15mac <- msianew %>% slice(27:85)
plot(ts(msia15mac$Dailynewcases))
#generation time distribution
mGT = generation.time ("gamma", c(4, 4.75)) #4 is rounded mean = 3.96, 4.75 = sd
#convert dataframe columns to named numbers
msianew_nn <- setNames(msia15mac$Dailynewcases, msia15mac$Date)
str(msianew_nn)
#estimate R0 using exponential growth method using start date of first day and end date of 30 days.
esteg <- est.R0.EG (msianew_nn, mGT, begin=1, end=59)
esteg
plot(esteg)
plotfit(esteg, xscale = "w")
#estimate R0 using maximum likelihood method
mGT = generation.time("gamma", c(4, 4.75))
estml <- est.R0.ML (msianew_nn, mGT)
estml
plot(estml)
plotfit(estml, xscale = "w")
res.R <- estimate.R(msianew_nn, GT=mGT, methods=c("EG","ML","SB","TD"))# applies methods EG, ML, SB, TD to the dataset
res.R
plotfit(res.R$estimates$EG)
res.R$estimates$EG
plotfit(res.R$estimates$ML)
res.R$estimates$ML
plotfit(res.R$estimates$SB)
res.R$estimates$SB
plotfit(res.R$estimates$TD)
res.R$estimates$TD
plotfit(res.R)
getwd()
plotfit(res.R)
# sensitivity analysis according to choice of time window for exponential growth
GT.flu <- generation.time("gamma", c(2.6,1))
sensitivity.analysis(Germany.1918, GT.flu, begin=1:15, end=16:30, est.method="EG", sa.type="time")
# sensitivity analysis according to generation time
sensitivity.analysis(Germany.1918, GT.type="gamma", GT.mean=seq(1,5,1), GT.sd.range=1, begin=1, end=27, est.method="EG", sa.type="GT")
msia1327mac <- msianew %>% slice(25:39)
msia1327mac <- setNames(msia1327mac$Dailynewcases, msia1327mac$Date)
plot(ts(msia1327mac))
msia1327mac <- msianew %>% slice(25:39)
msia1327mac <- setNames(msia1327mac$Dailynewcases, msia1327mac$Date)
plot(ts(msia1327mac))
msia1327mac <- msianew %>% slice(25:39)
msia1327mac <- setNames(msia1327mac$Dailynewcases, msia1327mac$Date)
plot(ts(msia1327mac))
res.R2 <- estimate.R(msia1327mac, GT=mGT, methods=c("EG","ML","SB","TD"))# applies methods EG, ML, SB, TD to the dataset
res.R2
(1.476442+1.656943+7.33179+8.2)/4
plotfit(res.R2$estimates$SB)
msia1327mac2 <- msianew %>% slice(25:38)
msia1327mac2$sb <- res.R2$estimates$SB$R
sbR <- setNames(msia1327mac2$sb, msia1327mac2$Date)
plot.ts(sbR)
plot(res.R2$estimates$SB)
sbdata <- data.frame()[1:14,3]
sbdata$R <- res.R2[["estimates"]][["SB"]][["R"]]
sbdata$ll <- res.R2[["estimates"]][["SB"]][["conf.int"]][["CI.lower."]]
sbdata$ul <- res.R2[["estimates"]][["SB"]][["conf.int"]][["CI.upper."]]
plot(sbdata$R)
plotfit(res.R2$estimates$TD)
plotfit(res.R2$estimates$TD)
plot(res.R2$estimates$TD)
getwd()
