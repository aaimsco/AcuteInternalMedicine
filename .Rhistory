xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Increased Initiation Rate of Treatment in Model")
parameters["h"] <- 1/2
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Increased Initiation Rate of Treatment in Model")
parameters["h"] <- 1
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Increased Initiation Rate of Treatment in Model")
parameters["h"] <- 1.5
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Increased Initiation Rate of Treatment in Model")
parameters["h"] <- 1.6
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Increased Initiation Rate of Treatment in Model")
library(deSolve)
library(ggplot2)
library(reshape2)
sir_model <- function (time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R+V
lambda <- beta*(I/N)
dS <- - lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
return(list(c(dS, dI, dR)))
}
)
}
N <- 300000
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p,
p=0.5)
N <- 300000
initial_state_values <- c(p=0.5,
S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p
)
N <- 300000
p <- 0.5
initial_state_values <- c(
S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p
)
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.5
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p)
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.5*N
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p)
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.5*(N-1)
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p)
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p)
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=p*(N-1),
V=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=0,
V=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
library(deSolve)
library(ggplot2)
library(reshape2)
sir_model <- function (time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R+V
lambda <- beta*(I/N)
dS <- - lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
dV <- p*(N-1)
return(list(c(dS, dI, dR, dV)))
}
)
}
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=0,
V=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
library(deSolve)
library(ggplot2)
library(reshape2)
sir_model <- function (time, state, parameters) {
with(as.list(c(state, parameters)), {
N <- S+I+R+V
lambda <- beta*(I/N)
dS <- - lambda*S
dI <- lambda*S - gamma*I
dR <- gamma*I
dV <- 0
return(list(c(dS, dI, dR, dV)))
}
)
}
N <- 300000
p <- 0.1
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=0,
V=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
p <- 0.3
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
p <- 0.8
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
# herd immunity or critical vaccine threshold
1-1/(parameters["beta"]/parameters["gamma"]
# herd immunity or critical vaccine threshold
1-1/(parameters["beta"]/parameters["gamma"])
N <- 300000
p <- 0.8
initial_state_values <- c(S=(1-p)*(N-1),
I=1,
R=0,
V=p*(N-1))
parameters <- c(beta=0.6,
gamma=0.2)
times <- seq(0, 90, 1)
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
p <- 0.8
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
p <- 0.5
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
N <- 300000
p <- 0.8
output <- as.data.frame(ode(
y = initial_state_values,
times = times,
func = sir_model,
parms = parameters
))
output_long <- melt(as.data.frame(output), id = "time")
output_long$proportion <- output_long$value/sum(initial_state_values)
ggplot(data = output_long,
aes(x=time, y=value, col=variable, group=variable)) +
geom_line() +
theme_minimal() +
xlab("Time(days)") +
ylab("Prevalence(count)") +
labs(colour ="Compartment",
title = "Treatment in Model")
1/2.5
library(plotly)
library(shiny)
library(googlesheets)
library(gsheet)
url <- 'https://docs.google.com/spreadsheets/d/1lUQGdg5NyDIcQIfZ_hsT6VX_L9MPmLMWF4thEQqimcs/edit?usp=sharing'
data <- gsheet2tbl(url)
p <- plot_ly(data, x = ~date, y = ~new_ilisari, type = 'bar', name = 'New ILI/SARI cases confirmed each day',
marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~SMA10, name = '10-day Moving averages', mode = "lines", type = "scatter", marker = list(color = 'rgb(255,125,0)')) %>%
add_trace(y = ~SMA5, name = '5-day Moving averages', mode = "lines", line = list(color = 'rgb(255,223,0)'), type = "scatter", marker = list(color = 'rgb(255,223,0)')) %>%
layout(title = 'New ILI/SARI cases confirmed each day',
xaxis = list(
title = "",
tickformat = "%b %d",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Confirmed new ILISARI cases',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0.5, y = 0.9, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
library(plotly)
library(shiny)
library(googlesheets)
library(gsheet)
url <- 'https://docs.google.com/spreadsheets/d/1lUQGdg5NyDIcQIfZ_hsT6VX_L9MPmLMWF4thEQqimcs/edit?usp=sharing'
data <- gsheet2tbl(url)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:83) # cannot go beyond since peak will change
library(distill)
library(plotly)
library(shiny)
library(googlesheets)
library(gsheet)
url <- 'https://docs.google.com/spreadsheets/d/1lUQGdg5NyDIcQIfZ_hsT6VX_L9MPmLMWF4thEQqimcs/edit?usp=sharing'
data <- gsheet2tbl(url)
p <- plot_ly(data, x = ~date, y = ~new_ilisari, type = 'bar', name = 'New ILI/SARI cases confirmed each day',
marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~SMA10, name = '10-day Moving averages', mode = "lines", type = "scatter", marker = list(color = 'rgb(255,125,0)')) %>%
add_trace(y = ~SMA5, name = '5-day Moving averages', mode = "lines", line = list(color = 'rgb(255,223,0)'), type = "scatter", marker = list(color = 'rgb(255,223,0)')) %>%
layout(title = 'New ILI/SARI cases confirmed each day',
xaxis = list(
title = "",
tickformat = "%b %d",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Confirmed new ILISARI cases',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0.5, y = 0.9, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
View(data)
library(distill)
library(plotly)
library(shiny)
library(googlesheets)
library(gsheet)
url <- 'https://docs.google.com/spreadsheets/d/1lUQGdg5NyDIcQIfZ_hsT6VX_L9MPmLMWF4thEQqimcs/edit?usp=sharing'
data <- gsheet2tbl(url)
p <- plot_ly(data, x = ~date, y = ~new_ilisari, type = 'bar', name = 'New ILI/SARI cases confirmed each day',
marker = list(color = 'rgb(55, 83, 109)')) %>%
add_trace(y = ~SMA10, name = '10-day Moving averages', mode = "lines", type = "scatter", marker = list(color = 'rgb(255,125,0)')) %>%
add_trace(y = ~SMA5, name = '5-day Moving averages', mode = "lines", line = list(color = 'rgb(255,223,0)'), type = "scatter", marker = list(color = 'rgb(255,223,0)')) %>%
layout(title = 'New ILI/SARI cases confirmed each day',
xaxis = list(
title = "",
tickformat = "%b %d",
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
yaxis = list(
title = 'Confirmed new ILISARI cases',
titlefont = list(
size = 16,
color = 'rgb(107, 107, 107)'),
tickfont = list(
size = 14,
color = 'rgb(107, 107, 107)')),
legend = list(x = 0.5, y = 0.9, bgcolor = 'rgba(255, 255, 255, 0)', bordercolor = 'rgba(255, 255, 255, 0)'),
barmode = 'group', bargap = 0.15, bargroupgap = 0.1)
p
