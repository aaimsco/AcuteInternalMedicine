p2 <- p2 + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(y = "Log(Daily incidence)")
ggplotly(p2)
lat=3 #mean latency period; dys
inf=11 #mean infectious period; dys
b1=1/lat
b2=1/inf
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,1), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
library(googlesheets)
library(gsheet)
library(dplyr)
library(incidence)
library(ggplot2)
library(EpiEstim)
library(tidyr)
library(lubridate)
library(ggformula)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:nrow(data))
#counts_msia <- data.frame(data$dailynew, data$ImportCases)
#colnames(counts_msia) <- c("local", "imported") #imported has zero - leads to error in estimate_R function!
#counts_msia <- as.matrix(counts_msia)
#counts_msia
counts_msia <- data.frame(data$dailynew, data$ImportCases)
colnames(counts_msia) <- c("local", "imported")
counts_msia <- as.matrix(counts_msia)
#counts_msia
incidmsia <- incidence(data$date)
incidmsia$counts <- counts_msia
#incidmsia
mco <- data.frame(phase = c("MCO"),
start = as.Date(c("2020-03-18")),
end = as.Date(c("2020-05-04"))
)
#plot(incidmsia) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
#             ymax=250, fill = phase), color="transparent", fill="black", alpha=0.3) +
#labs(title = "Epidemic Curve", subtitle = "MCO - shaded area")
library(plotly)
library(viridis)
library(RColorBrewer)
p <- plot(incidmsia) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkgrey", "darkred", "lightgrey"), name = "Key")
#fig <- ggplotly(p)
#fig
ggplotly(p, kwargs=list(layout=list(hovermode='x')))
counts_msia <- data.frame(data$dailynew)
colnames(counts_msia) <- c("local")
counts_msia <- as.matrix(counts_msia)
incidmsia2 <- incidence(data$date)
incidmsia2$counts <- counts_msia
incidmsia_peak <- find_peak(incidmsia2)
p1b <- plot(incidmsia2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
geom_vline(col = "steelblue", lty = 2, aes(xintercept = as.numeric(incidmsia_peak), text = paste(incidmsia_peak))) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkred", "lightgrey", "steelblue"), name = "Key")
p1c <- ggplotly(p1b, kwargs=list(layout=list(hovermode='x', autosize = F, width = 766, height = 500, margin = m)))
p1c$x$data[[3]]$text <- "Peak: 2020-03-26"
p1c
#incidmsia2[["n"]] <- as.integer(5000)
incidmsia2[["counts"]] <- as.matrix(as.integer(incidmsia2[["counts"]]))
incidmsia2
incidmsia_fit <- incidence::fit(incidmsia2,
split = incidmsia_peak)
# plot the incidence data and the model fit
p2 <- plot(incidmsia2) %>% add_incidence_fit(incidmsia_fit, col_pal = "incidence_pal1_dark") +
labs(title = "Observed and modelled incidence of COVID-19 cases",
subtitle = "Malaysia, 2020") +
scale_fill_manual(values=c("darkred", "lightgrey", "steelblue"), name = "Key", labels = c("Incidence", "b", "c"))
ggplotly(p2) %>%
layout(title = list(text = paste0('Observed and modelled incidence of COVID-19 cases',
'<br>',
'<sup>',
'Malaysia, 2020',
'</sup>')))
dfgf <- incidmsia_fit[["before"]][["info"]][["pred"]][["fit"]]
dfgf[25:nrow(data)] <- NA
dfgl <- incidmsia_fit[["before"]][["info"]][["pred"]][["lwr"]]
dfgl[25:nrow(data)] <- NA
dfgu <- incidmsia_fit[["before"]][["info"]][["pred"]][["upr"]]
dfgu[25:nrow(data)] <- NA
dfdf <- as.numeric()
dfdf[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["fit"]]
dfdu <- as.numeric()
dfdu[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["upr"]]
dfdl <- as.numeric()
dfdl[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["lwr"]]
fig <- plot_ly(data, x = ~date, y = ~dailynew, type = 'bar', name = 'Incidence')
fig %>%
add_trace(y = dfgf, type = "scatter", mode = "lines", name = 'Growth - Fit') %>%
add_trace(y = dfdf, type = "scatter", mode = "lines", name = 'Decay - Fit') %>%
add_trace(y = dfgu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfgl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(239, 112, 21,0.4)', name = 'Growth - Lower limit') %>%
add_trace(y = dfdu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfdl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(0,100,80,0.4)', name = 'Growth - Lower limit')
logdata2 <- log(data$dailynew[1:21])
Time <- data$date[1:21]
model <- lm(logdata2 ~ Time)
summary(model)
model_predict <- cbind.data.frame(logdata2, Time, predict(model, interval = 'confidence'))
# plot the points (actual observations), regression line, and confidence interval
p2 <- ggplot(model_predict, aes(Time,logdata2))
p2 <- p2 + geom_point()
p2 <- p2 + geom_line(aes(Time, fit), col = "steelblue")
p2 <- p2 + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(y = "Log(Daily incidence)")
ggplotly(p2)
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
b1=1/lat
b2=1/inf
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,1), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
paste("Daily growth rate in Civilians=",round(r_model, digits=3), ";95% CI(", round(r_model -1.96*sterr_model, digits=3),
" - ",  round(r_model+1.96*sterr_model,digits=3),")")
1 + 0.184(3.96)
1 + (0.184*3.96)
exp(0.184*3.96)
1 + (0.184*3.96)
1 + (0.141*3.96)
1 + (0.227*3.96)
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,1), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
(1+ (r_model/b1))(1+(r_model/b2))
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
(1+ (r_model/b1))*(1+(r_model/b2))
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,3), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,5), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
sigmasi = 4.75
exp((r_model*3.96)-(0.5*r_model^2*sigmasi^2))
library(googlesheets)
library(gsheet)
library(dplyr)
library(incidence)
library(ggplot2)
library(EpiEstim)
library(tidyr)
library(lubridate)
library(ggformula)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:nrow(data))
#counts_msia <- data.frame(data$dailynew, data$ImportCases)
#colnames(counts_msia) <- c("local", "imported") #imported has zero - leads to error in estimate_R function!
#counts_msia <- as.matrix(counts_msia)
#counts_msia
counts_msia <- data.frame(data$dailynew, data$ImportCases)
colnames(counts_msia) <- c("local", "imported")
counts_msia <- as.matrix(counts_msia)
#counts_msia
incidmsia <- incidence(data$date)
incidmsia$counts <- counts_msia
#incidmsia
mco <- data.frame(phase = c("MCO"),
start = as.Date(c("2020-03-18")),
end = as.Date(c("2020-05-04"))
)
#plot(incidmsia) +
# theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
#geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
#             ymax=250, fill = phase), color="transparent", fill="black", alpha=0.3) +
#labs(title = "Epidemic Curve", subtitle = "MCO - shaded area")
library(plotly)
library(viridis)
library(RColorBrewer)
p <- plot(incidmsia) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkgrey", "darkred", "lightgrey"), name = "Key")
#fig <- ggplotly(p)
#fig
ggplotly(p, kwargs=list(layout=list(hovermode='x')))
counts_msia <- data.frame(data$dailynew)
colnames(counts_msia) <- c("local")
counts_msia <- as.matrix(counts_msia)
incidmsia2 <- incidence(data$date)
incidmsia2$counts <- counts_msia
incidmsia_peak <- find_peak(incidmsia2)
p1b <- plot(incidmsia2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
geom_vline(col = "steelblue", lty = 2, aes(xintercept = as.numeric(incidmsia_peak), text = paste(incidmsia_peak))) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkred", "lightgrey", "steelblue"), name = "Key")
p1c <- ggplotly(p1b, kwargs=list(layout=list(hovermode='x', autosize = F, width = 766, height = 500, margin = m)))
p1c$x$data[[3]]$text <- "Peak: 2020-03-26"
p1c
#incidmsia2[["n"]] <- as.integer(5000)
incidmsia2[["counts"]] <- as.matrix(as.integer(incidmsia2[["counts"]]))
incidmsia2
incidmsia_fit <- incidence::fit(incidmsia2,
split = incidmsia_peak)
# plot the incidence data and the model fit
p2 <- plot(incidmsia2) %>% add_incidence_fit(incidmsia_fit, col_pal = "incidence_pal1_dark") +
labs(title = "Observed and modelled incidence of COVID-19 cases",
subtitle = "Malaysia, 2020") +
scale_fill_manual(values=c("darkred", "lightgrey", "steelblue"), name = "Key", labels = c("Incidence", "b", "c"))
ggplotly(p2) %>%
layout(title = list(text = paste0('Observed and modelled incidence of COVID-19 cases',
'<br>',
'<sup>',
'Malaysia, 2020',
'</sup>')))
dfgf <- incidmsia_fit[["before"]][["info"]][["pred"]][["fit"]]
dfgf[25:nrow(data)] <- NA
dfgl <- incidmsia_fit[["before"]][["info"]][["pred"]][["lwr"]]
dfgl[25:nrow(data)] <- NA
dfgu <- incidmsia_fit[["before"]][["info"]][["pred"]][["upr"]]
dfgu[25:nrow(data)] <- NA
dfdf <- as.numeric()
dfdf[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["fit"]]
dfdu <- as.numeric()
dfdu[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["upr"]]
dfdl <- as.numeric()
dfdl[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["lwr"]]
fig <- plot_ly(data, x = ~date, y = ~dailynew, type = 'bar', name = 'Incidence')
fig %>%
add_trace(y = dfgf, type = "scatter", mode = "lines", name = 'Growth - Fit') %>%
add_trace(y = dfdf, type = "scatter", mode = "lines", name = 'Decay - Fit') %>%
add_trace(y = dfgu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfgl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(239, 112, 21,0.4)', name = 'Growth - Lower limit') %>%
add_trace(y = dfdu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfdl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(0,100,80,0.4)', name = 'Growth - Lower limit')
logdata2 <- log(data$dailynew[1:21])
Time <- data$date[1:21]
model <- lm(logdata2 ~ Time)
summary(model)
model_predict <- cbind.data.frame(logdata2, Time, predict(model, interval = 'confidence'))
# plot the points (actual observations), regression line, and confidence interval
p2 <- ggplot(model_predict, aes(Time,logdata2))
p2 <- p2 + geom_point()
p2 <- p2 + geom_line(aes(Time, fit), col = "steelblue")
p2 <- p2 + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(y = "Log(Daily incidence)")
ggplotly(p2)
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
paste("Daily growth rate in Civilians=",round(r_model, digits=3), ";95% CI(", round(r_model -1.96*sterr_model, digits=3),
" - ",  round(r_model+1.96*sterr_model,digits=3),")")
1 + (0.184*3.96)
1 + (0.141*3.96)
1 + (0.227*3.96)
exp(0.184*3.96)
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
(1+ (r_model/b1))*(1+(r_model/b2))
## identical to below
lat=2 #mean latency period; dys
inf=11 #mean infectious period; dys
# these values from: Position Statement from the National Centre for Infectious Diseases and the Chapter of Infectious Disease Physicians, Academy of Medicine, Singapore – 23 May 2020
b1=1/lat
b2=1/inf
mean_SI = b1 + b2
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,5), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
sigmasi = 4.75
exp((r_model*3.96)-(0.5*r_model^2*sigmasi^2))
library(distill)
library(googlesheets)
library(gsheet)
library(dplyr)
library(incidence)
library(ggplot2)
library(EpiEstim)
library(tidyr)
library(lubridate)
library(ggformula)
url <- 'https://docs.google.com/spreadsheets/d/1jLn3UoJBfusBcEbLS8n8oPBJd6bUiA0WMqZ7LHNkdjw/edit?usp=sharing'
data <- gsheet2tbl(url)
data <- data %>% slice(3:nrow(data))
counts_msia <- data.frame(data$dailynew, data$ImportCases)
colnames(counts_msia) <- c("local", "imported")
counts_msia <- as.matrix(counts_msia)
incidmsia <- incidence(data$date)
incidmsia$counts <- counts_msia
mco <- data.frame(phase = c("MCO"),
start = as.Date(c("2020-03-18")),
end = as.Date(c("2020-05-04"))
)
library(plotly)
library(viridis)
library(RColorBrewer)
p <- plot(incidmsia) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkgrey", "darkred", "lightgrey"), name = "Key")
ggplotly(p, kwargs=list(layout=list(hovermode='x')))
counts_msia <- data.frame(data$dailynew)
colnames(counts_msia) <- c("local")
counts_msia <- as.matrix(counts_msia)
incidmsia2 <- incidence(data$date)
incidmsia2$counts <- counts_msia
incidmsia_peak <- find_peak(incidmsia2)
p1b <- plot(incidmsia2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_rect(data=mco, inherit.aes=FALSE, aes(xmin=start, xmax=end, ymin=0,
ymax=250, fill = phase), col = "transparent",  alpha=0.3) +
geom_vline(col = "steelblue", lty = 2, aes(xintercept = as.numeric(incidmsia_peak), text = paste(incidmsia_peak))) +
labs(title = "Epidemic Curve", subtitle = "MCO - shaded area") +
scale_fill_manual(values=c("darkred", "lightgrey", "steelblue"), name = "Key")
p1c <- ggplotly(p1b, kwargs=list(layout=list(hovermode='x', autosize = F, width = 766, height = 500, margin = m)))
p1c$x$data[[3]]$text <- "Peak: 2020-03-26"
p1c
incidmsia2[["counts"]] <- as.matrix(as.integer(incidmsia2[["counts"]]))
incidmsia_fit <- incidence::fit(incidmsia2,
split = incidmsia_peak)
dfgf <- incidmsia_fit[["before"]][["info"]][["pred"]][["fit"]]
dfgf[25:nrow(data)] <- NA
dfgl <- incidmsia_fit[["before"]][["info"]][["pred"]][["lwr"]]
dfgl[25:nrow(data)] <- NA
dfgu <- incidmsia_fit[["before"]][["info"]][["pred"]][["upr"]]
dfgu[25:nrow(data)] <- NA
dfdf <- as.numeric()
dfdf[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["fit"]]
dfdu <- as.numeric()
dfdu[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["upr"]]
dfdl <- as.numeric()
dfdl[24:nrow(data)] <- incidmsia_fit[["after"]][["info"]][["pred"]][["lwr"]]
fig <- plot_ly(data, x = ~date, y = ~dailynew, type = 'bar', name = 'Incidence')
fig %>%
add_trace(y = dfgf, type = "scatter", mode = "lines", name = 'Growth - Fit') %>%
add_trace(y = dfdf, type = "scatter", mode = "lines", name = 'Decay - Fit') %>%
add_trace(y = dfgu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfgl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(239, 112, 21,0.4)', name = 'Growth - Lower limit') %>%
add_trace(y = dfdu, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, name = 'Growth - Upper limit') %>%
add_trace(y = dfdl, type = "scatter", mode = "lines", line = list(color = 'transparent'),
showlegend = FALSE, fill = 'tonexty', fillcolor='rgba(0,100,80,0.4)', name = 'Growth - Lower limit')
logdata2 <- log(data$dailynew[1:21])
Time <- data$date[1:21]
model <- lm(logdata2 ~ Time)
summary(model)
model_predict <- cbind.data.frame(logdata2, Time, predict(model, interval = 'confidence'))
# plot the points (actual observations), regression line, and confidence interval
p2 <- ggplot(model_predict, aes(Time,logdata2))
p2 <- p2 + geom_point()
p2 <- p2 + geom_line(aes(Time, fit), col = "steelblue")
p2 <- p2 + geom_ribbon(aes(ymin=lwr,ymax=upr), alpha=0.3) +
labs(y = "Log(Daily incidence)")
ggplotly(p2)
lat=3 #mean latency period; dys
inf=8 #mean infectious period; dys
b1=1/lat
b2=1/inf
r_model=summary.lm(model)$coefficients[2,1]
sterr_model=summary.lm(model)$coefficients[2,2]
Rexp=(1+(r_model*lat))*(1+(r_model*inf))
Rexp_lower=(1+((r_model-1.96*sterr_model)*lat))*(1+((r_model-1.96*sterr_model)*inf))
Rexp_upper=(1+((r_model+1.96*sterr_model)*lat))*(1+((r_model+1.96*sterr_model)*inf))
paste0(round(Rexp,1), " [95% CI: ", round(Rexp_lower, 1), ", ", round(Rexp_upper, 1), "]")
library(earlyR)
# http://www.repidemicsconsortium.org/earlyR/articles/earlyR.html
counts_msia_trunc <- data.frame(data$dailynew[12:15])
colnames(counts_msia_trunc) <- c("local")
counts_msia_trunc <- as.matrix(counts_msia_trunc)
incidmsia <- incidence(data$date[12:15])
incidmsia$counts <- counts_msia_trunc
res <- get_R(incidmsia, si_mean = 3.96, si_sd = 4.75)
# serial interval assumptions: [Zhanwei et al (2020)](https://wwwnc.cdc.gov/eid/article/26/6/20-0357_article)
pres <- plot(res, frame.plot=FALSE)
pres
set.seed(6472)
R_val <- sample_R(res, 1000)
summary(R_val)
quantile(R_val, c(0.025, 0.975))
hist(R_val, border = "grey", col = "navy",
xlab = "Values of R",
main = "Sample of likely R values")
knit_with_parameters('~/Documents/COVID/trialdistill2.Rmd')
as.Date("2020-05-10") + 6
as.Date("2020-05-24") + 8
shiny::runApp('~/Documents/COVID/try')
runApp('~/Downloads/app-5.R')
runApp('~/Documents/COVID/try')
runApp('~/Downloads/app-5.R')
runApp('~/Downloads/app-5.R')
runApp('~/Downloads/app-5.R')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
server = function(input, output, session){
url <- a("Google Homepage", href="https://www.google.com/")
output$tab <- renderUI({
tagList("URL link:", url)
})
}
source('~/Documents/COVID/rpubs/tagger/app.R', echo=TRUE)
source('~/Documents/COVID/rpubs/tagger/app.R', echo=TRUE)
runApp('tagger')
runApp('tagger')
runApp('tagger')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('tagger')
runApp('tagger')
runApp('tagger')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
runApp('~/Documents/COVID/COVID19SafeDate')
